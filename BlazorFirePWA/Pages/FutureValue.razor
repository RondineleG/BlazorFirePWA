@page "/futurevalue"
@using System.Globalization
@using BlazorFireCalculators.Data
@inject  IJSRuntime JSRuntime
@inherits FVCalculation

<h2>Future Value Calculator</h2>
<p>Discover the power of compound interest.</p>

<div class="calc-container">
    <div class="form-group row">
        <label for="initialvalue" class="col-sm-8 col-form-label">Current Portfolio Balance:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="initialvalue" class="form-control input-lg" inputmode="decimal" @bind-value="Data.InitialValueString" @oninput="@(e => OnInput(e, x => Data.InitialValue = x))"
                       @onfocusin="@(e => OnFocusIn(Data.InitialValue, Data.InitialValueString, y => Data.InitialValueString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data.InitialValue, y => Data.InitialValueString = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="monthlycontribution" class="col-sm-8 col-form-label">Monthly Contribution:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="monthlycontribution" class="form-control input-lg" inputmode="decimal" @bind="Data.MonthlyContributionString" @oninput="@(e => OnInput(e, x => Data.MonthlyContribution = x))"
                       @onfocusin="@(e => OnFocusIn(Data.MonthlyContribution, Data.MonthlyContributionString, y => Data.MonthlyContributionString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data.MonthlyContribution, y => Data.MonthlyContributionString = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="numyears" class="col-sm-8 col-form-label">Number of Years:</label>
        <div class="col-sm-4">
            <input id="numyears" class="form-control input-lg" inputmode="decimal" @bind="Data.NumYearsString" @oninput="@(e => OnInput(e, x => Data.NumYears = x))"
                   @onfocusout="@(e => OnFocusOut(Format.None, Data.NumYears, y => Data.NumYearsString = y))" />
        </div>
    </div>
    <div class="form-group row">
        <label for="annualreturn" class="col-sm-8 col-form-label">Annual Return:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <input id="annualreturn" class="form-control input-lg" inputmode="decimal" @bind="Data.AnnualInterestString" @oninput="@(e => OnInput(e, x => Data.AnnualInterest = x))"
                       @onfocusin="@(e => OnFocusIn(Data.AnnualInterest, Data.AnnualInterestString, y => Data.AnnualInterestString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Percent, Data.AnnualInterest, y => Data.AnnualInterestString = y))" />
                <div class="input-group-append">
                    <span class="input-group-text">%</span>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-12 text-right">
            <button @onclick="GoToResults" class="btn btn-primary">Calculate</button>
            <button @onclick="ResetAll" class="btn btn-secondary">Reset</button>
        </div>
    </div>

    <div class="form-group row highlight-color">
        <label for="futurevalue" class="col-sm-8 col-form-label">Future Value:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="futurevalue" class="form-control input-lg" readonly @bind="Data.FutureValueString" />
            </div>
        </div>
    </div>
    <div class="form-group row highlight-grey">
        <label for="totalcontributions" class="col-sm-8 col-form-label">Your Contributions:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="totalcontributions" class="form-control input-lg" readonly @bind="Data.TotalContributionsString" />
            </div>
        </div>
    </div>
    <div class="form-group row highlight-grey">
        <label for="interestearnings" class="col-sm-8 col-form-label">Interest Earnings:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="interestearnings" class="form-control input-lg" readonly @bind="Data.InterestEarningsString" />
            </div>
        </div>
    </div>
    <div>
        <p>
            Note: This calculator uses the most conservative method for calculating future value.
            It assumes interest payouts are made at the beginning of each year
            and annual contributions are made at the end of each year.
        </p>
    </div>
</div>

@code {

    FVCalculation Data = new FVCalculation();

    //Hopefully the following event handlers will not be necessary
    //  once Blazor bind:format supports currency and number formatting.
    //  Monitor this issue for updates: https://github.com/aspnet/AspNetCore/issues/5523

    // The OnInput handler receives a delegate for the property to modify
    //      It validates the data and updates the FVCalculation object
    // The OnFocusIn handler clear currency and percentage formatting
    //      Issue: When custom OnFocusIn handler is set, contents of <input> field are not highlighted when field gains focus
    // The OnFocusOut handler formats string for currency, percentage

    private void OnInput(ChangeEventArgs e, Action<double> setProperty)
    {
        //setProperty delegate will assign double value to the property passed from <input>
        try
        {
            setProperty(Math.Round(Double.Parse(e.Value.ToString()),2));
        }
        catch (Exception ex)
        {
            setProperty(0);
        }
        UpdateAll();
    }

    private void OnFocusIn(double propValue, string stringValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //stringValue contains the value of the corresponding string passed from <input>
        //setString delegate will assign value to the property passed from <input>
        if (!string.IsNullOrEmpty(stringValue))
            setString(String.Format("{0:0.##}", propValue));
    }

    private void OnFocusOut(Format format, double propValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //setString delegate will assign value to the property passed from <input>
        switch (format)
        {
            case (Format.Currency):
                //Used for formatting currencies
                setString(String.Format("{0:N0}", propValue));
                break;
            case (Format.Percent):
                //Used for formatting percentages
                //Not really necessary anymore since we're adding % to inputgroup with bootstrap
                //setString(String.Format("{0:N}%", propValue));
                setString(String.Format("{0:N2}", propValue));
                break;
            case (Format.None):
                // This is used for vars that need no formatting.
                // Why not just bind to number directly?
                //    Because binding to string allows empty string on load and on reset click
                setString(propValue.ToString());
                break;
        }
    }

    //This method is called with each oninput event
    //  Why? Because this is a client-side and I don't have to worry about my server resources ^_^
    //  I could do this with an event handler and custom setter for each property,
    //      but I didn't feel like having a bunch of duplicated code
    private void UpdateAll()
    {
        Data.CalculateFutureValue();
        SetStrings();

    }

    //Update the bound strings.  This will display the results
    private void SetStrings()
    {
        if (!double.IsNaN(Data.FutureValue))
        {
            Data.FutureValueString = String.Format("{0:N2}", Data.FutureValue);
            Data.TotalContributionsString = String.Format("{0:N2}", Data.TotalContributions);
            Data.InterestEarningsString = String.Format("{0:N2}", Data.InterestEarnings);
        }
    }

    //This handler just scrolls page to bottom.  No way to scroll to div
    //Calculate button actually doesn't calculate, because calculations are done oninput
    //Kind of a fake button to make UI intuitive
    private async void GoToResults()
    {
        //Using JS Interop because Blazor does not yet support hashed routes (#results)
        await JSRuntime.InvokeVoidAsync("ScrollToBottom");
    }

    private void ResetAll()
    {
        Data = new FVCalculation();
    }
}
