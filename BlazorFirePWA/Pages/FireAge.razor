@page "/fireage"
@using System.Globalization
@using BlazorFireCalculators.Data
@inject IJSRuntime JSRuntime
@inherits FireAgeCalculation

<h2>FIRE Age Calculator</h2>
<p>When will you be financially independent?</p>

<div class="calc-container">

    <div class="form-group row">
        <label for="currentage" class="col-sm-8 col-form-label">Current Age:</label>
        <div class="col-sm-4">
            <!--Update when bind:format supports currency formats -->
            <input id="currentage" class="form-control input-lg" inputmode="decimal" @bind="Data.CurrentAgeString" @oninput="@(e => OnInput(e, x => Data.CurrentAge = x))"
                   @onfocusout="@(e => OnFocusOut(Format.None, Data.CurrentAge, y => Data.CurrentAgeString = y))" />
        </div>
    </div>
    <div class="form-group row">
        <label for="currentbalance" class="col-sm-8 col-form-label">Current Portfolio Balance:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="currentbalance" class="form-control input-lg" inputmode="decimal" @bind="Data.CurrentBalanceString" @oninput="@(e => OnInput(e, x => Data.CurrentBalance = x))"
                       @onfocusin="@(e => OnFocusIn(Data.CurrentBalance, Data.CurrentBalanceString, y => Data.CurrentBalanceString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data.CurrentBalance, y => Data.CurrentBalanceString = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="annualcontribution" class="col-sm-8 col-form-label">Annual Contribution:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="annualcontribution" class="form-control input-lg" inputmode="decimal" @bind="Data.AnnualContributionString" @oninput="@(e => OnInput(e, x => Data.AnnualContribution = x))"
                       @onfocusin="@(e => OnFocusIn(Data.AnnualContribution, Data.AnnualContributionString, y => Data.AnnualContributionString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data.AnnualContribution, y => Data.AnnualContributionString = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="annualreturn" class="col-sm-8 col-form-label">Annual Return:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <input id="annualreturn" class="form-control input-lg" inputmode="decimal" @bind="Data.ExpectedReturnString" @oninput="@(e => OnInput(e, x => Data.ExpectedReturn = x))"
                       @onfocusin="@(e => OnFocusIn(Data.ExpectedReturn, Data.ExpectedReturnString, y => Data.ExpectedReturnString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Percent, Data.ExpectedReturn, y => Data.ExpectedReturnString = y))" />
                <div class="input-group-append">
                    <span class="input-group-text">%</span>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="retirementexpenses" class="col-sm-8 col-form-label">Annual Retirement Expenses:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="retirementexpenses" class="form-control input-lg" inputmode="decimal" @bind="Data.RetirementExpensesString" @oninput="@(e => OnInput(e, x => Data.RetirementExpenses = x))"
                       @onfocusin="@(e => OnFocusIn(Data.RetirementExpenses, Data.RetirementExpensesString, y => Data.RetirementExpensesString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data.RetirementExpenses, y => Data.RetirementExpensesString = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="withdrawalrate" class="col-sm-8 col-form-label">Safe Withdrawal Rate:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <input id="withdrawalrate" class="form-control input-lg" inputmode="decimal" @bind="Data.WithdrawalRateString" @oninput="@(e => OnInput(e, x => Data.WithdrawalRate = x))"
                       @onfocusin="@(e => OnFocusIn(Data.WithdrawalRate, Data.WithdrawalRateString, y => Data.WithdrawalRateString = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Percent, Data.WithdrawalRate, y => Data.WithdrawalRateString = y))" />
                <div class="input-group-append">
                    <span class="input-group-text">%</span>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-12 text-right">
            <button @onclick="GoToResults" class="btn btn-primary">Calculate</button>
            <button @onclick="ResetAll" class="btn btn-secondary">Reset</button>
        </div>
    </div>

    <div class="form-group row highlight-color">
        <label for="fireage" class="col-sm-8 col-form-label">FIRE Age:</label>
        <div class="col-sm-4">
            <input id="fireage" class="form-control input-lg" readonly @bind="Data.FireAgeString" />
        </div>
    </div>
    <div class="form-group row highlight-grey">
        <label for="firebalance" class="col-sm-8 col-form-label">FIRE Balance:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="firebalance" class="form-control input-lg" readonly @bind="Data.FireBalanceString" />
            </div>
        </div>
    </div>
</div>
@code {
    FireAgeCalculation Data = new FireAgeCalculation();

    //Hopefully the following event handlers will not be necessary
    //  once Blazor bind:format supports currency and number formatting.
    //  Monitor this issue for updates: https://github.com/aspnet/AspNetCore/issues/5523

    // The OnInput handler receives a delegate for the property to modify
    //      It validates the data and updates the FVCalculation object
    // The OnFocusIn handler clear currency and percentage formatting
    //      Issue: When custom OnFocusIn handler is set, contents of <input> field are not highlighted when field gains focus
    // The OnFocusOut handlers format string for currency, percentage

    private void OnInput(ChangeEventArgs e, Action<double> setProperty)
    {
        //setProperty delegate will assign double value to the property passed from <input>
        try
        {
            setProperty(Math.Round(Double.Parse(e.Value.ToString()), 2));
        }
        catch (Exception ex)
        {
            setProperty(0);
        }
        UpdateAll();
    }

    private void OnFocusIn(double propValue, string stringValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //stringValue contains the value of the corresponding string passed from <input>
        //setString delegate will assign value to the property passed from <input>
        if (!string.IsNullOrEmpty(stringValue))
            setString(String.Format("{0:0.##}", propValue));
    }


    private void OnFocusOut(Format format, double propValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //setString delegate will assign value to the property passed from <input>
        switch (format)
        {
            case (Format.Currency):
                //Used for formatting currencies
                setString(String.Format("{0:N0}", propValue));
                break;
            case (Format.Percent):
                //Used for formatting percentages
                //Not really necessary anymore since we're adding % to inputgroup with bootstrap
                //setString(String.Format("{0:N}%", propValue));
                setString(String.Format("{0:N2}", propValue));
                break;
            case (Format.None):
                // This is used for vars that need no formatting.
                // Why not just bind to number directly?
                //    Because binding to string allows empty string on load and on reset click
                setString(propValue.ToString());
                break;
        }
    }

    //This method is called with each oninput event
    //  Why? Because this is a client-side and I don't have to worry about my server resources ^_^
    //  I could do this with an event handler and custom setter for each property,
    //      but I didn't feel like having a bunch of duplicated code
    private void UpdateAll()
    {
        Data.CalculateFireAge();
        SetStrings();

    }

    //Update the bound strings.  This will display the results
    private void SetStrings()
    {
        if (!double.IsNaN(Data.FireAge) && !double.IsInfinity(Data.FireAge))
        {
            Data.FireAgeString = String.Format("{0:0.##}", Data.FireAge);
            Data.FireBalanceString = String.Format("{0:N2}", Data.FireBalance);
        }
    }

    //This handler just scrolls page to bottom, which should put results in view
    //   Blazor does not yet support hashed routes (#results)
    //Calculate button actually doesn't calculate, because calculations are done oninput
    //   Kind of a fake button to make UI intuitive
    private async void GoToResults()
    {
        //Using JS Interop
        await JSRuntime.InvokeVoidAsync("ScrollToBottom");
    }

    private void ResetAll()
    {
        Data = new FireAgeCalculation();
    }
}
